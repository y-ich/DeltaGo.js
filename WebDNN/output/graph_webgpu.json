{
  "kernel_source": "\n#include <metal_stdlib>\nusing namespace metal;\n\n#define OPTIMIZE 1\n\nkernel void im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint index_thread[[thread_position_in_threadgroup]],\n                          uint index_group[[threadgroup_position_in_grid]])\n{\n#define SH_EQUAL_1 1\n#define SW_EQUAL_1 1\n#define DH_EQUAL_1 1\n#define DW_EQUAL_1 1\n#define C1_DIVIDABLE_BY_4 1\n\n\n#if OPTIMIZE && C1_DIVIDABLE_BY_4\n    const device float4 *im4 = (const device float4 *)((static_buffer + meta_buffer[0]));\n    device float4 *col4 = (device float4 *)((static_buffer + meta_buffer[1]));\n    const int C1_4 = (meta_buffer[3]) >> 2;\n#else\n    const device float *im = (static_buffer + meta_buffer[0]);\n    device float *col = (static_buffer + meta_buffer[1]);\n    const int C1 = meta_buffer[3];\n#endif\n\n    const int H1 = meta_buffer[4];\n    const int W1 = meta_buffer[5];\n    const int H2 = meta_buffer[6];\n    const int W2 = meta_buffer[7];\n    const int KH = meta_buffer[8];\n    const int KW = meta_buffer[9];\n#if !DH_EQUAL_1\n    const int DH = meta_buffer[10];\n#endif\n#if !DW_EQUAL_1\n    const int DW = meta_buffer[11];\n#endif\n    const int PH = meta_buffer[14];\n    const int PW = meta_buffer[15];\n\n#if !OPTIMIZE || !SH_EQUAL_1\n    const int SH = meta_buffer[12];\n#endif\n\n#if !OPTIMIZE || !SW_EQUAL_1\n    const int SW = meta_buffer[13];\n#endif\n\n    const int H1P = H1 + 2 * PH;\n    const int W1P = W1 + 2 * PW;\n\n    const int w1 = (index_group % W1P) - PW;\n    const int h1 = (index_group / W1P % H1P) - PH;\n    const int  n = index_group / W1P / H1P;\n\n#if OPTIMIZE && C1_DIVIDABLE_BY_4\n    for (int c1_4 = index_thread; c1_4 < C1_4; c1_4 += 64) {\n        const float4 v4 = (h1 < 0 || h1 >= H1 || w1 < 0 || w1 >= W1) ? 0 : im4[((n * H1 + h1) * W1 + w1) * C1_4 + c1_4];\n#else\n    for (int c1 = index_thread; c1 < C1; c1 += 64) {\n        const float v = (h1 < 0 || h1 >= H1 || w1 < 0 || w1 >= W1) ? 0 : im[((n * H1 + h1) * W1 + w1) * C1 + c1];\n#endif\n\n#if OPTIMIZE && SH_EQUAL_1\n        for (int kh = 0; kh < KH; kh++) {\n    #if DH_EQUAL_1\n            const int h2 = h1 + PH - kh;\n    #else\n            const int h2 = h1 + PH - kh * DH;\n    #endif\n    \n#else\n        for (int kh = (h1 + PH) % SH; kh < KH; kh += SH) {\n    #if DH_EQUAL_1\n            const int h2 = (h1 + PH - kh) / SH;\n    #else\n            const int h2 = (h1 + PH - kh * DH) / SH;\n    #endif\n#endif\n            if (h2 < 0 || h2 >= H2) continue;\n\n#if OPTIMIZE && SH_EQUAL_1\n            for (int kw = 0; kw < KW; kw++) {\n    #if DW_EQUAL_1\n                const int w2 = w1 + PW - kw;\n    #else\n                const int w2 = w1 + PW - kw * DW;\n    #endif\n#else\n            for (int kw = (w1 + PW) % SW; kw < KW; kw += SW) {\n    #if DW_EQUAL_1\n                const int w2 = (w1 + PW - kw) / SW;\n    #else\n                const int w2 = (w1 + PW - kw * DW) / SW;\n    #endif\n#endif\n                if (w2 < 0 || w2 >= W2) continue;\n\n#if OPTIMIZE && C1_DIVIDABLE_BY_4\n                col4[((((n * H2 + h2) * W2 + w2) * KH + kh) * KW + kw) * C1_4 + c1_4] = v4;\n#else\n                col[((((n * H2 + h2) * W2 + w2) * KH + kh) * KW + kw) * C1 + c1] = v;\n#endif\n            }\n        }\n    }\n\n\n#undef SH_EQUAL_1\n#undef SW_EQUAL_1\n#undef DH_EQUAL_1\n#undef DW_EQUAL_1\n#undef C1_DIVIDABLE_BY_4\n}\n\n\nkernel void sgemm_38ceab045b96881f2c13581f6f973ec647e3627b5ad6a15d200a3fe6(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint index[[thread_index_in_threadgroup]],\n                          uint2 group_position[[threadgroup_position_in_grid]])\n{\n#define TRANSPOSE_A 1\n#define TRANSPOSE_B 1\n#define M_DIVIDABLE_BY_64 0\n#define N_DIVIDABLE_BY_64 1\n#define K_DIVIDABLE_BY_8 1\n\n#if TRANSPOSE_A\n    #define A_STRIDE_K 1\n    #define A_STRIDE_M K\n#else\n    #define A_STRIDE_K M\n    #define A_STRIDE_M 1\n#endif\n\n#if TRANSPOSE_B\n    #define B_STRIDE_K N\n    #define B_STRIDE_N 1\n#else\n    #define B_STRIDE_K 1\n    #define B_STRIDE_N K\n#endif\n\n#if K_DIVIDABLE_BY_8 && M_DIVIDABLE_BY_64  && N_DIVIDABLE_BY_64 && !TRANSPOSE_A && TRANSPOSE_B && OPTIMIZE\n    const device float4 *load_target4 = (index & 32) \n        ? (const device float4 *)((static_buffer + meta_buffer[1])) \n        : (const device float4 *)((static_buffer + meta_buffer[0]));\n#else\n    const device float *load_target = (index & 32) \n        ? ((static_buffer + meta_buffer[1])) \n        : ((static_buffer + meta_buffer[0]));\n#endif\n\n    const int M = meta_buffer[3];\n    const int N = meta_buffer[4];\n\n    const int K = meta_buffer[5];\n\n    threadgroup float4 shared4[32 * 8 * 2];\n\n    const int stride_k = (index & 32) ? B_STRIDE_K : A_STRIDE_K;\n    const int stride_mn = (index & 32) ? B_STRIDE_N : A_STRIDE_M;\n\n    const int m_offset = index & 7;\n    const int n_offset = index >> 3;\n\n    const int mn_load_offset = ((index & 32) ? group_position.y : group_position.x) * 64 + (index & 15) * 4;\n    const int k_load_offset = ((index & 16) ? 1 : 0);\n\n    int track0 = mn_load_offset * stride_mn + (k_load_offset + 0) * stride_k;\n    int track2 = track0 + 2 * stride_k;\n    int track4 = track0 + 4 * stride_k;\n    int track6 = track0 + 6 * stride_k;\n\n#if !OPTIMIZE || !M_DIVIDABLE_BY_64 || !N_DIVIDABLE_BY_64\n    const int max_MN = (index & 32) ? N : M;\n#endif\n\n    int shared_offset4 = ((index & 32) ? 16 : 0) + k_load_offset * 32 + (index & 15);\n    int read_A_offset4 = m_offset * 2;\n    int read_B_offset4 = n_offset * 2 + 16;\n\n    float4 result[16] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n    int k = 0;\n\n    while (k < K)\n    {\n        {\n#if OPTIMIZE && K_DIVIDABLE_BY_8\n    #if OPTIMIZE && M_DIVIDABLE_BY_64 && N_DIVIDABLE_BY_64\n        #if OPTIMIZE && !TRANSPOSE_A && TRANSPOSE_B\n            shared4[shared_offset4 + 32 * 0] = load_target4[track0 >> 2];\n            shared4[shared_offset4 + 32 * 2] = load_target4[track2 >> 2];\n            shared4[shared_offset4 + 32 * 4] = load_target4[track4 >> 2];\n            shared4[shared_offset4 + 32 * 6] = load_target4[track6 >> 2];\n        #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                load_target[track0 + stride_mn * 0],\n                load_target[track0 + stride_mn * 1],\n                load_target[track0 + stride_mn * 2],\n                load_target[track0 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 2] = float4(\n                load_target[track2 + stride_mn * 0],\n                load_target[track2 + stride_mn * 1],\n                load_target[track2 + stride_mn * 2],\n                load_target[track2 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 4] = float4(\n                load_target[track4 + stride_mn * 0],\n                load_target[track4 + stride_mn * 1],\n                load_target[track4 + stride_mn * 2],\n                load_target[track4 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 6] = float4(\n                load_target[track6 + stride_mn * 0],\n                load_target[track6 + stride_mn * 1],\n                load_target[track6 + stride_mn * 2],\n                load_target[track6 + stride_mn * 3]\n            ); \n        #endif\n    #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track0 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track0 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track0 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 2] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track2 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track2 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track2 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 4] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track4 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track4 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track4 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 6] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track6 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track6 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track6 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n    #endif\n\n            k += 8;\n#else\n    #if OPTIMIZE && M_DIVIDABLE_BY_64 && N_DIVIDABLE_BY_64\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 2] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 4] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 6] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n            k += 2;\n    #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track0 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track0 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track0 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 2] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track2 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track2 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track2 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 4] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track4 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track4 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track4 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 6] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track6 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track6 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track6 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n            k += 2;\n    #endif\n#endif\n        }\n\n        threadgroup_barrier(mem_flags::mem_threadgroup);\n\n        {\n            for (int k_sub = 0; k_sub < 8; k_sub++)\n            {\n                float4 a00 = shared4[32 * k_sub + read_A_offset4 + 0];\n                float4 a01 = shared4[32 * k_sub + read_A_offset4 + 1];\n                float4 b00 = shared4[32 * k_sub + read_B_offset4 + 0];\n                float4 b01 = shared4[32 * k_sub + read_B_offset4 + 1];\n\n                result[4][0]  += b00[0] * a00[2];\n                result[4][1]  += b00[1] * a00[2];\n                result[0][1]  += b00[1] * a00[0];\n                result[0][0]  += b00[0] * a00[0];\n                result[6][0]  += b00[0] * a00[3];\n                result[6][1]  += b00[1] * a00[3];\n                result[2][1]  += b00[1] * a00[1];\n                result[2][0]  += b00[0] * a00[1];\n                result[12][0] += b00[0] * a01[2];\n                result[12][1] += b00[1] * a01[2];\n                result[8][1]  += b00[1] * a01[0];\n                result[8][0]  += b00[0] * a01[0];\n                result[14][0] += b00[0] * a01[3];\n                result[14][1] += b00[1] * a01[3];\n                result[10][1] += b00[1] * a01[1];\n                result[10][0] += b00[0] * a01[1];\n\n                result[14][2] += b00[2] * a01[3];\n                result[14][3] += b00[3] * a01[3];\n                result[10][3] += b00[3] * a01[1];\n                result[10][2] += b00[2] * a01[1];\n                result[12][2] += b00[2] * a01[2];\n                result[12][3] += b00[3] * a01[2];\n                result[8][3]  += b00[3] * a01[0];\n                result[8][2]  += b00[2] * a01[0];\n                result[6][2]  += b00[2] * a00[3];\n                result[6][3]  += b00[3] * a00[3];\n                result[2][3]  += b00[3] * a00[1];\n                result[2][2]  += b00[2] * a00[1];\n                result[4][2]  += b00[2] * a00[2];\n                result[4][3]  += b00[3] * a00[2];\n                result[0][3]  += b00[3] * a00[0];\n                result[0][2]  += b00[2] * a00[0];\n\n                result[5][0]  += b01[0] * a00[2];\n                result[5][1]  += b01[1] * a00[2];\n                result[1][1]  += b01[1] * a00[0];\n                result[1][0]  += b01[0] * a00[0];\n                result[7][0]  += b01[0] * a00[3];\n                result[7][1]  += b01[1] * a00[3];\n                result[3][1]  += b01[1] * a00[1];\n                result[3][0]  += b01[0] * a00[1];\n                result[13][0] += b01[0] * a01[2];\n                result[13][1] += b01[1] * a01[2];\n                result[9][1]  += b01[1] * a01[0];\n                result[9][0]  += b01[0] * a01[0];\n                result[15][0] += b01[0] * a01[3];\n                result[15][1] += b01[1] * a01[3];\n                result[11][1] += b01[1] * a01[1];\n                result[11][0] += b01[0] * a01[1];\n\n                result[15][2] += b01[2] * a01[3];\n                result[15][3] += b01[3] * a01[3];\n                result[11][3] += b01[3] * a01[1];\n                result[11][2] += b01[2] * a01[1];\n                result[13][2] += b01[2] * a01[2];\n                result[13][3] += b01[3] * a01[2];\n                result[9][3]  += b01[3] * a01[0];\n                result[9][2]  += b01[2] * a01[0];\n                result[7][2]  += b01[2] * a00[3];\n                result[7][3]  += b01[3] * a00[3];\n                result[3][3]  += b01[3] * a00[1];\n                result[3][2]  += b01[2] * a00[1];\n                result[5][2]  += b01[2] * a00[2];\n                result[5][3]  += b01[3] * a00[2];\n                result[1][3]  += b01[3] * a00[0];\n                result[1][2]  += b01[2] * a00[0];\n            }\n        }\n\n        shared_offset4 ^= 32 * 8;\n        read_A_offset4 ^= 32 * 8;\n        read_B_offset4 ^= 32 * 8;\n        track0 += stride_k * 8;\n        track2 += stride_k * 8;\n        track4 += stride_k * 8;\n        track6 += stride_k * 8;\n    }\n\n    {\n    \n#if OPTIMIZE && N_DIVIDABLE_BY_64\n        device float4 *C4 = (device float4 *)((static_buffer + meta_buffer[2]));\n        const int N4 = N >> 2;\n        int m = group_position.x * 64 + m_offset * 8;\n        for (int m_sub = 0; m_sub < 8; m_sub++)\n        {\n\n    #if !M_DIVIDABLE_BY_64\n            if (m >= M) continue;\n    #endif\n\n            const int n = group_position.y * 16 + n_offset * 2;\n            float4 result0 = result[m_sub * 2 + 0];\n            float4 result1 = result[m_sub * 2 + 1];\n\n            C4[m * N4 + n + 0] = result0;\n            C4[m * N4 + n + 1] = result1;\n            \n            m++;\n        }\n#else\n        device float *C = (static_buffer + meta_buffer[2]);\n        int m = group_position.x * 64 + m_offset * 8;\n        for (int m_sub = 0; m_sub < 8; m_sub++)\n        {\n            int n = group_position.y * 64 + n_offset * 8;\n\n            for (int n_sub1 = 0; n_sub1 < 2; n_sub1++)\n            {\n                for (int n_sub2 = 0; n_sub2 < 4; n_sub2++)\n                {\n\n    #if OPTIMIZE && M_DIVIDABLE_BY_64\n                    (         n < N) ? (C[m * N + n] = result[m_sub * 2 + n_sub1][n_sub2]) : 0;\n    #else\n                    (m < M && n < N) ? (C[m * N + n] = result[m_sub * 2 + n_sub1][n_sub2]) : 0;\n    #endif\n                    n++;\n                }\n            }\n            \n            m++;\n        }\n#endif\n\n    }\n\n\n#undef M_DIVIDABLE_BY_64\n#undef N_DIVIDABLE_BY_64\n#undef K_DIVIDABLE_BY_8\n#undef TRANSPOSE_A\n#undef TRANSPOSE_B\n#undef A_STRIDE_K\n#undef B_STRIDE_K\n#undef A_STRIDE_M\n#undef A_STRIDE_M\n}\n\n\nkernel void relu_86ca1327ba8947df12b9003eb996ae350dfd07626c5df0df962937aa(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    device float * v2 = (static_buffer + meta_buffer[1]);\n    const int D0 = meta_buffer[2];\n    int d0;\n    for (d0 = gid; d0 < D0; d0 += num_threads) {\n        const float v3 = v1[d0];\n        float v4;\n        {\n            v4 = v3 > 0 ? v3 : 0;\n        }\n        v2[d0] = v4;\n    }\n}\n\n\nkernel void sgemm_7b4817c4ac9dfe433720b075aa47e84624573a88bc125170e1038e1b(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint index[[thread_index_in_threadgroup]],\n                          uint2 group_position[[threadgroup_position_in_grid]])\n{\n#define TRANSPOSE_A 1\n#define TRANSPOSE_B 1\n#define M_DIVIDABLE_BY_64 0\n#define N_DIVIDABLE_BY_64 0\n#define K_DIVIDABLE_BY_8 1\n\n#if TRANSPOSE_A\n    #define A_STRIDE_K 1\n    #define A_STRIDE_M K\n#else\n    #define A_STRIDE_K M\n    #define A_STRIDE_M 1\n#endif\n\n#if TRANSPOSE_B\n    #define B_STRIDE_K N\n    #define B_STRIDE_N 1\n#else\n    #define B_STRIDE_K 1\n    #define B_STRIDE_N K\n#endif\n\n#if K_DIVIDABLE_BY_8 && M_DIVIDABLE_BY_64  && N_DIVIDABLE_BY_64 && !TRANSPOSE_A && TRANSPOSE_B && OPTIMIZE\n    const device float4 *load_target4 = (index & 32) \n        ? (const device float4 *)((static_buffer + meta_buffer[1])) \n        : (const device float4 *)((static_buffer + meta_buffer[0]));\n#else\n    const device float *load_target = (index & 32) \n        ? ((static_buffer + meta_buffer[1])) \n        : ((static_buffer + meta_buffer[0]));\n#endif\n\n    const int M = meta_buffer[3];\n    const int N = meta_buffer[4];\n\n    const int K = meta_buffer[5];\n\n    threadgroup float4 shared4[32 * 8 * 2];\n\n    const int stride_k = (index & 32) ? B_STRIDE_K : A_STRIDE_K;\n    const int stride_mn = (index & 32) ? B_STRIDE_N : A_STRIDE_M;\n\n    const int m_offset = index & 7;\n    const int n_offset = index >> 3;\n\n    const int mn_load_offset = ((index & 32) ? group_position.y : group_position.x) * 64 + (index & 15) * 4;\n    const int k_load_offset = ((index & 16) ? 1 : 0);\n\n    int track0 = mn_load_offset * stride_mn + (k_load_offset + 0) * stride_k;\n    int track2 = track0 + 2 * stride_k;\n    int track4 = track0 + 4 * stride_k;\n    int track6 = track0 + 6 * stride_k;\n\n#if !OPTIMIZE || !M_DIVIDABLE_BY_64 || !N_DIVIDABLE_BY_64\n    const int max_MN = (index & 32) ? N : M;\n#endif\n\n    int shared_offset4 = ((index & 32) ? 16 : 0) + k_load_offset * 32 + (index & 15);\n    int read_A_offset4 = m_offset * 2;\n    int read_B_offset4 = n_offset * 2 + 16;\n\n    float4 result[16] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n    int k = 0;\n\n    while (k < K)\n    {\n        {\n#if OPTIMIZE && K_DIVIDABLE_BY_8\n    #if OPTIMIZE && M_DIVIDABLE_BY_64 && N_DIVIDABLE_BY_64\n        #if OPTIMIZE && !TRANSPOSE_A && TRANSPOSE_B\n            shared4[shared_offset4 + 32 * 0] = load_target4[track0 >> 2];\n            shared4[shared_offset4 + 32 * 2] = load_target4[track2 >> 2];\n            shared4[shared_offset4 + 32 * 4] = load_target4[track4 >> 2];\n            shared4[shared_offset4 + 32 * 6] = load_target4[track6 >> 2];\n        #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                load_target[track0 + stride_mn * 0],\n                load_target[track0 + stride_mn * 1],\n                load_target[track0 + stride_mn * 2],\n                load_target[track0 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 2] = float4(\n                load_target[track2 + stride_mn * 0],\n                load_target[track2 + stride_mn * 1],\n                load_target[track2 + stride_mn * 2],\n                load_target[track2 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 4] = float4(\n                load_target[track4 + stride_mn * 0],\n                load_target[track4 + stride_mn * 1],\n                load_target[track4 + stride_mn * 2],\n                load_target[track4 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 6] = float4(\n                load_target[track6 + stride_mn * 0],\n                load_target[track6 + stride_mn * 1],\n                load_target[track6 + stride_mn * 2],\n                load_target[track6 + stride_mn * 3]\n            ); \n        #endif\n    #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track0 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track0 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track0 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 2] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track2 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track2 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track2 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 4] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track4 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track4 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track4 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 6] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track6 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track6 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track6 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n    #endif\n\n            k += 8;\n#else\n    #if OPTIMIZE && M_DIVIDABLE_BY_64 && N_DIVIDABLE_BY_64\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 2] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 4] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 6] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n            k += 2;\n    #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track0 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track0 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track0 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 2] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track2 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track2 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track2 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 4] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track4 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track4 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track4 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 6] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track6 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track6 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track6 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n            k += 2;\n    #endif\n#endif\n        }\n\n        threadgroup_barrier(mem_flags::mem_threadgroup);\n\n        {\n            for (int k_sub = 0; k_sub < 8; k_sub++)\n            {\n                float4 a00 = shared4[32 * k_sub + read_A_offset4 + 0];\n                float4 a01 = shared4[32 * k_sub + read_A_offset4 + 1];\n                float4 b00 = shared4[32 * k_sub + read_B_offset4 + 0];\n                float4 b01 = shared4[32 * k_sub + read_B_offset4 + 1];\n\n                result[4][0]  += b00[0] * a00[2];\n                result[4][1]  += b00[1] * a00[2];\n                result[0][1]  += b00[1] * a00[0];\n                result[0][0]  += b00[0] * a00[0];\n                result[6][0]  += b00[0] * a00[3];\n                result[6][1]  += b00[1] * a00[3];\n                result[2][1]  += b00[1] * a00[1];\n                result[2][0]  += b00[0] * a00[1];\n                result[12][0] += b00[0] * a01[2];\n                result[12][1] += b00[1] * a01[2];\n                result[8][1]  += b00[1] * a01[0];\n                result[8][0]  += b00[0] * a01[0];\n                result[14][0] += b00[0] * a01[3];\n                result[14][1] += b00[1] * a01[3];\n                result[10][1] += b00[1] * a01[1];\n                result[10][0] += b00[0] * a01[1];\n\n                result[14][2] += b00[2] * a01[3];\n                result[14][3] += b00[3] * a01[3];\n                result[10][3] += b00[3] * a01[1];\n                result[10][2] += b00[2] * a01[1];\n                result[12][2] += b00[2] * a01[2];\n                result[12][3] += b00[3] * a01[2];\n                result[8][3]  += b00[3] * a01[0];\n                result[8][2]  += b00[2] * a01[0];\n                result[6][2]  += b00[2] * a00[3];\n                result[6][3]  += b00[3] * a00[3];\n                result[2][3]  += b00[3] * a00[1];\n                result[2][2]  += b00[2] * a00[1];\n                result[4][2]  += b00[2] * a00[2];\n                result[4][3]  += b00[3] * a00[2];\n                result[0][3]  += b00[3] * a00[0];\n                result[0][2]  += b00[2] * a00[0];\n\n                result[5][0]  += b01[0] * a00[2];\n                result[5][1]  += b01[1] * a00[2];\n                result[1][1]  += b01[1] * a00[0];\n                result[1][0]  += b01[0] * a00[0];\n                result[7][0]  += b01[0] * a00[3];\n                result[7][1]  += b01[1] * a00[3];\n                result[3][1]  += b01[1] * a00[1];\n                result[3][0]  += b01[0] * a00[1];\n                result[13][0] += b01[0] * a01[2];\n                result[13][1] += b01[1] * a01[2];\n                result[9][1]  += b01[1] * a01[0];\n                result[9][0]  += b01[0] * a01[0];\n                result[15][0] += b01[0] * a01[3];\n                result[15][1] += b01[1] * a01[3];\n                result[11][1] += b01[1] * a01[1];\n                result[11][0] += b01[0] * a01[1];\n\n                result[15][2] += b01[2] * a01[3];\n                result[15][3] += b01[3] * a01[3];\n                result[11][3] += b01[3] * a01[1];\n                result[11][2] += b01[2] * a01[1];\n                result[13][2] += b01[2] * a01[2];\n                result[13][3] += b01[3] * a01[2];\n                result[9][3]  += b01[3] * a01[0];\n                result[9][2]  += b01[2] * a01[0];\n                result[7][2]  += b01[2] * a00[3];\n                result[7][3]  += b01[3] * a00[3];\n                result[3][3]  += b01[3] * a00[1];\n                result[3][2]  += b01[2] * a00[1];\n                result[5][2]  += b01[2] * a00[2];\n                result[5][3]  += b01[3] * a00[2];\n                result[1][3]  += b01[3] * a00[0];\n                result[1][2]  += b01[2] * a00[0];\n            }\n        }\n\n        shared_offset4 ^= 32 * 8;\n        read_A_offset4 ^= 32 * 8;\n        read_B_offset4 ^= 32 * 8;\n        track0 += stride_k * 8;\n        track2 += stride_k * 8;\n        track4 += stride_k * 8;\n        track6 += stride_k * 8;\n    }\n\n    {\n    \n#if OPTIMIZE && N_DIVIDABLE_BY_64\n        device float4 *C4 = (device float4 *)((static_buffer + meta_buffer[2]));\n        const int N4 = N >> 2;\n        int m = group_position.x * 64 + m_offset * 8;\n        for (int m_sub = 0; m_sub < 8; m_sub++)\n        {\n\n    #if !M_DIVIDABLE_BY_64\n            if (m >= M) continue;\n    #endif\n\n            const int n = group_position.y * 16 + n_offset * 2;\n            float4 result0 = result[m_sub * 2 + 0];\n            float4 result1 = result[m_sub * 2 + 1];\n\n            C4[m * N4 + n + 0] = result0;\n            C4[m * N4 + n + 1] = result1;\n            \n            m++;\n        }\n#else\n        device float *C = (static_buffer + meta_buffer[2]);\n        int m = group_position.x * 64 + m_offset * 8;\n        for (int m_sub = 0; m_sub < 8; m_sub++)\n        {\n            int n = group_position.y * 64 + n_offset * 8;\n\n            for (int n_sub1 = 0; n_sub1 < 2; n_sub1++)\n            {\n                for (int n_sub2 = 0; n_sub2 < 4; n_sub2++)\n                {\n\n    #if OPTIMIZE && M_DIVIDABLE_BY_64\n                    (         n < N) ? (C[m * N + n] = result[m_sub * 2 + n_sub1][n_sub2]) : 0;\n    #else\n                    (m < M && n < N) ? (C[m * N + n] = result[m_sub * 2 + n_sub1][n_sub2]) : 0;\n    #endif\n                    n++;\n                }\n            }\n            \n            m++;\n        }\n#endif\n\n    }\n\n\n#undef M_DIVIDABLE_BY_64\n#undef N_DIVIDABLE_BY_64\n#undef K_DIVIDABLE_BY_8\n#undef TRANSPOSE_A\n#undef TRANSPOSE_B\n#undef A_STRIDE_K\n#undef B_STRIDE_K\n#undef A_STRIDE_M\n#undef A_STRIDE_M\n}\n\n\nkernel void elementwiseadd_59df3b0d6feefd576062ac58c68e6dade28056ea47dd0a57294bdf90(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    device float * v3 = (static_buffer + meta_buffer[2]);\n    const int D0 = meta_buffer[3];\n    int d0;\n    for (d0 = gid; d0 < D0; d0 += num_threads) {\n        const float v4 = v1[d0];\n        const float v5 = v2[d0];\n        float v6;\n        {\n            v6 = v5 + v4;\n        }\n        v3[d0] = v6;\n    }\n}\n\n\nkernel void softmax_19085802eeba7fd293021820114957d9f2a820f7f48816b74c49d271(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint index[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float *X = (static_buffer + meta_buffer[0]);\n    device float *Y = (static_buffer + meta_buffer[1]);\n    const int D1 = meta_buffer[2];\n    const int D2 = meta_buffer[3];\n    const int D3 = meta_buffer[4];\n\n    for (int gid = index; gid < D1 * D3; gid += num_threads) {\n        const int d3 = gid % D3;\n        const int d1 = gid / D3;\n        \n        float set_max = 0.0f;\n        for (int d2 = 0; d2 < D2; d2++) {\n            float val = X[(d1 * D2 + d2) * D3 + d3];\n            if (val > set_max) {\n                set_max = val;\n            }\n        }\n        \n        float sum_exp = 0.0f;\n        for (int d2 = 0; d2 < D2; d2++) {\n            float val = X[(d1 * D2 + d2) * D3 + d3];\n            float exp_x = exp(val - set_max);\n            sum_exp += exp_x;\n            Y[(d1 * D2 + d2) * D3 + d3] = exp_x;\n        }\n        \n        for (int d2 = 0; d2 < D2; d2++) {\n            Y[(d1 * D2 + d2) * D3 + d3] /= sum_exp;\n        }\n    }\n}\n",
  "exec_infos": [
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 529,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        169,
        33,
        72,
        0,
        41,
        54,
        59,
        0,
        1,
        0,
        0,
        0,
        48,
        0,
        0,
        0,
        19,
        0,
        0,
        0,
        19,
        0,
        0,
        0,
        19,
        0,
        0,
        0,
        19,
        0,
        0,
        0,
        5,
        0,
        0,
        0,
        5,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_38ceab045b96881f2c13581f6f973ec647e3627b5ad6a15d200a3fe6",
      "threadgroups_per_grid": {
        "width": 6,
        "height": 3,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        41,
        54,
        59,
        0,
        0,
        0,
        0,
        0,
        233,
        214,
        70,
        0,
        105,
        1,
        0,
        0,
        192,
        0,
        0,
        0,
        176,
        4,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "relu_86ca1327ba8947df12b9003eb996ae350dfd07626c5df0df962937aa",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        233,
        214,
        70,
        0,
        233,
        214,
        70,
        0,
        192,
        14,
        1,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 529,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        233,
        214,
        70,
        0,
        41,
        54,
        59,
        0,
        1,
        0,
        0,
        0,
        192,
        0,
        0,
        0,
        19,
        0,
        0,
        0,
        19,
        0,
        0,
        0,
        21,
        0,
        0,
        0,
        21,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_38ceab045b96881f2c13581f6f973ec647e3627b5ad6a15d200a3fe6",
      "threadgroups_per_grid": {
        "width": 7,
        "height": 3,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        41,
        54,
        59,
        0,
        0,
        132,
        3,
        0,
        233,
        214,
        70,
        0,
        185,
        1,
        0,
        0,
        192,
        0,
        0,
        0,
        192,
        6,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "relu_86ca1327ba8947df12b9003eb996ae350dfd07626c5df0df962937aa",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        233,
        214,
        70,
        0,
        233,
        214,
        70,
        0,
        192,
        74,
        1,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 529,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        233,
        214,
        70,
        0,
        41,
        54,
        59,
        0,
        1,
        0,
        0,
        0,
        192,
        0,
        0,
        0,
        21,
        0,
        0,
        0,
        21,
        0,
        0,
        0,
        21,
        0,
        0,
        0,
        21,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_38ceab045b96881f2c13581f6f973ec647e3627b5ad6a15d200a3fe6",
      "threadgroups_per_grid": {
        "width": 7,
        "height": 3,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        41,
        54,
        59,
        0,
        0,
        148,
        8,
        0,
        233,
        214,
        70,
        0,
        185,
        1,
        0,
        0,
        192,
        0,
        0,
        0,
        192,
        6,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "relu_86ca1327ba8947df12b9003eb996ae350dfd07626c5df0df962937aa",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        233,
        214,
        70,
        0,
        233,
        214,
        70,
        0,
        192,
        74,
        1,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 529,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        233,
        214,
        70,
        0,
        41,
        54,
        59,
        0,
        1,
        0,
        0,
        0,
        192,
        0,
        0,
        0,
        21,
        0,
        0,
        0,
        21,
        0,
        0,
        0,
        21,
        0,
        0,
        0,
        21,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_38ceab045b96881f2c13581f6f973ec647e3627b5ad6a15d200a3fe6",
      "threadgroups_per_grid": {
        "width": 7,
        "height": 3,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        41,
        54,
        59,
        0,
        0,
        164,
        13,
        0,
        233,
        214,
        70,
        0,
        185,
        1,
        0,
        0,
        192,
        0,
        0,
        0,
        192,
        6,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "relu_86ca1327ba8947df12b9003eb996ae350dfd07626c5df0df962937aa",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        233,
        214,
        70,
        0,
        233,
        214,
        70,
        0,
        192,
        74,
        1,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 529,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        233,
        214,
        70,
        0,
        41,
        54,
        59,
        0,
        1,
        0,
        0,
        0,
        192,
        0,
        0,
        0,
        21,
        0,
        0,
        0,
        21,
        0,
        0,
        0,
        21,
        0,
        0,
        0,
        21,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_38ceab045b96881f2c13581f6f973ec647e3627b5ad6a15d200a3fe6",
      "threadgroups_per_grid": {
        "width": 7,
        "height": 3,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        41,
        54,
        59,
        0,
        0,
        180,
        18,
        0,
        233,
        214,
        70,
        0,
        185,
        1,
        0,
        0,
        192,
        0,
        0,
        0,
        192,
        6,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "relu_86ca1327ba8947df12b9003eb996ae350dfd07626c5df0df962937aa",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        233,
        214,
        70,
        0,
        233,
        214,
        70,
        0,
        192,
        74,
        1,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 529,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        233,
        214,
        70,
        0,
        41,
        54,
        59,
        0,
        1,
        0,
        0,
        0,
        192,
        0,
        0,
        0,
        21,
        0,
        0,
        0,
        21,
        0,
        0,
        0,
        21,
        0,
        0,
        0,
        21,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_38ceab045b96881f2c13581f6f973ec647e3627b5ad6a15d200a3fe6",
      "threadgroups_per_grid": {
        "width": 7,
        "height": 3,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        41,
        54,
        59,
        0,
        0,
        196,
        23,
        0,
        233,
        214,
        70,
        0,
        185,
        1,
        0,
        0,
        192,
        0,
        0,
        0,
        192,
        6,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "relu_86ca1327ba8947df12b9003eb996ae350dfd07626c5df0df962937aa",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        233,
        214,
        70,
        0,
        233,
        214,
        70,
        0,
        192,
        74,
        1,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 529,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        233,
        214,
        70,
        0,
        41,
        54,
        59,
        0,
        1,
        0,
        0,
        0,
        192,
        0,
        0,
        0,
        21,
        0,
        0,
        0,
        21,
        0,
        0,
        0,
        21,
        0,
        0,
        0,
        21,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_38ceab045b96881f2c13581f6f973ec647e3627b5ad6a15d200a3fe6",
      "threadgroups_per_grid": {
        "width": 7,
        "height": 3,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        41,
        54,
        59,
        0,
        0,
        212,
        28,
        0,
        233,
        214,
        70,
        0,
        185,
        1,
        0,
        0,
        192,
        0,
        0,
        0,
        192,
        6,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "relu_86ca1327ba8947df12b9003eb996ae350dfd07626c5df0df962937aa",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        233,
        214,
        70,
        0,
        233,
        214,
        70,
        0,
        192,
        74,
        1,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 529,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        233,
        214,
        70,
        0,
        41,
        54,
        59,
        0,
        1,
        0,
        0,
        0,
        192,
        0,
        0,
        0,
        21,
        0,
        0,
        0,
        21,
        0,
        0,
        0,
        21,
        0,
        0,
        0,
        21,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_38ceab045b96881f2c13581f6f973ec647e3627b5ad6a15d200a3fe6",
      "threadgroups_per_grid": {
        "width": 7,
        "height": 3,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        41,
        54,
        59,
        0,
        0,
        228,
        33,
        0,
        233,
        214,
        70,
        0,
        185,
        1,
        0,
        0,
        192,
        0,
        0,
        0,
        192,
        6,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "relu_86ca1327ba8947df12b9003eb996ae350dfd07626c5df0df962937aa",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        233,
        214,
        70,
        0,
        233,
        214,
        70,
        0,
        192,
        74,
        1,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 529,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        233,
        214,
        70,
        0,
        41,
        54,
        59,
        0,
        1,
        0,
        0,
        0,
        192,
        0,
        0,
        0,
        21,
        0,
        0,
        0,
        21,
        0,
        0,
        0,
        21,
        0,
        0,
        0,
        21,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_38ceab045b96881f2c13581f6f973ec647e3627b5ad6a15d200a3fe6",
      "threadgroups_per_grid": {
        "width": 7,
        "height": 3,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        41,
        54,
        59,
        0,
        0,
        244,
        38,
        0,
        233,
        214,
        70,
        0,
        185,
        1,
        0,
        0,
        192,
        0,
        0,
        0,
        192,
        6,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "relu_86ca1327ba8947df12b9003eb996ae350dfd07626c5df0df962937aa",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        233,
        214,
        70,
        0,
        233,
        214,
        70,
        0,
        192,
        74,
        1,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 529,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        233,
        214,
        70,
        0,
        41,
        54,
        59,
        0,
        1,
        0,
        0,
        0,
        192,
        0,
        0,
        0,
        21,
        0,
        0,
        0,
        21,
        0,
        0,
        0,
        21,
        0,
        0,
        0,
        21,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_38ceab045b96881f2c13581f6f973ec647e3627b5ad6a15d200a3fe6",
      "threadgroups_per_grid": {
        "width": 7,
        "height": 3,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        41,
        54,
        59,
        0,
        0,
        4,
        44,
        0,
        233,
        214,
        70,
        0,
        185,
        1,
        0,
        0,
        192,
        0,
        0,
        0,
        192,
        6,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "relu_86ca1327ba8947df12b9003eb996ae350dfd07626c5df0df962937aa",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        233,
        214,
        70,
        0,
        233,
        214,
        70,
        0,
        192,
        74,
        1,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 529,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        233,
        214,
        70,
        0,
        41,
        54,
        59,
        0,
        1,
        0,
        0,
        0,
        192,
        0,
        0,
        0,
        21,
        0,
        0,
        0,
        21,
        0,
        0,
        0,
        21,
        0,
        0,
        0,
        21,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_38ceab045b96881f2c13581f6f973ec647e3627b5ad6a15d200a3fe6",
      "threadgroups_per_grid": {
        "width": 7,
        "height": 3,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        41,
        54,
        59,
        0,
        0,
        20,
        49,
        0,
        233,
        214,
        70,
        0,
        185,
        1,
        0,
        0,
        192,
        0,
        0,
        0,
        192,
        6,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "relu_86ca1327ba8947df12b9003eb996ae350dfd07626c5df0df962937aa",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        233,
        214,
        70,
        0,
        233,
        214,
        70,
        0,
        192,
        74,
        1,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 441,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        233,
        214,
        70,
        0,
        41,
        54,
        59,
        0,
        1,
        0,
        0,
        0,
        192,
        0,
        0,
        0,
        21,
        0,
        0,
        0,
        21,
        0,
        0,
        0,
        19,
        0,
        0,
        0,
        19,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_38ceab045b96881f2c13581f6f973ec647e3627b5ad6a15d200a3fe6",
      "threadgroups_per_grid": {
        "width": 6,
        "height": 3,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        41,
        54,
        59,
        0,
        0,
        36,
        54,
        0,
        233,
        186,
        68,
        0,
        105,
        1,
        0,
        0,
        192,
        0,
        0,
        0,
        192,
        6,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "relu_86ca1327ba8947df12b9003eb996ae350dfd07626c5df0df962937aa",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        233,
        186,
        68,
        0,
        233,
        186,
        68,
        0,
        192,
        14,
        1,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_7b4817c4ac9dfe433720b075aa47e84624573a88bc125170e1038e1b",
      "threadgroups_per_grid": {
        "width": 6,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        233,
        186,
        68,
        0,
        0,
        52,
        59,
        0,
        169,
        201,
        69,
        0,
        105,
        1,
        0,
        0,
        1,
        0,
        0,
        0,
        192,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "elementwiseadd_59df3b0d6feefd576062ac58c68e6dade28056ea47dd0a57294bdf90",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        192,
        52,
        59,
        0,
        169,
        201,
        69,
        0,
        169,
        201,
        69,
        0,
        105,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "softmax_19085802eeba7fd293021820114957d9f2a820f7f48816b74c49d271",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        169,
        201,
        69,
        0,
        169,
        201,
        69,
        0,
        1,
        0,
        0,
        0,
        105,
        1,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    }
  ],
  "weight_encoding": "raw",
  "memory_layout": {
    "static": {
      "size": 4744537,
      "allocations": {
        "a15": {
          "name": "a15",
          "offset": 4727209,
          "size": 17328
        },
        "a17": {
          "name": "a17",
          "offset": 3880489,
          "size": 433200
        },
        "a56": {
          "name": "a56",
          "offset": 4642537,
          "size": 69312
        },
        "a20": {
          "name": "a20",
          "offset": 3880489,
          "size": 762048
        },
        "a57": {
          "name": "a57",
          "offset": 4642537,
          "size": 84672
        },
        "a23": {
          "name": "a23",
          "offset": 3880489,
          "size": 762048
        },
        "a58": {
          "name": "a58",
          "offset": 4642537,
          "size": 84672
        },
        "a26": {
          "name": "a26",
          "offset": 3880489,
          "size": 762048
        },
        "a59": {
          "name": "a59",
          "offset": 4642537,
          "size": 84672
        },
        "a29": {
          "name": "a29",
          "offset": 3880489,
          "size": 762048
        },
        "a60": {
          "name": "a60",
          "offset": 4642537,
          "size": 84672
        },
        "a32": {
          "name": "a32",
          "offset": 3880489,
          "size": 762048
        },
        "a61": {
          "name": "a61",
          "offset": 4642537,
          "size": 84672
        },
        "a35": {
          "name": "a35",
          "offset": 3880489,
          "size": 762048
        },
        "a62": {
          "name": "a62",
          "offset": 4642537,
          "size": 84672
        },
        "a38": {
          "name": "a38",
          "offset": 3880489,
          "size": 762048
        },
        "a63": {
          "name": "a63",
          "offset": 4642537,
          "size": 84672
        },
        "a41": {
          "name": "a41",
          "offset": 3880489,
          "size": 762048
        },
        "a64": {
          "name": "a64",
          "offset": 4642537,
          "size": 84672
        },
        "a44": {
          "name": "a44",
          "offset": 3880489,
          "size": 762048
        },
        "a65": {
          "name": "a65",
          "offset": 4642537,
          "size": 84672
        },
        "a47": {
          "name": "a47",
          "offset": 3880489,
          "size": 762048
        },
        "a66": {
          "name": "a66",
          "offset": 4642537,
          "size": 84672
        },
        "a50": {
          "name": "a50",
          "offset": 3880489,
          "size": 623808
        },
        "a67": {
          "name": "a67",
          "offset": 4504297,
          "size": 69312
        },
        "a70": {
          "name": "a70",
          "offset": 4573609,
          "size": 361
        },
        "a1": {
          "name": "a1",
          "offset": 0,
          "size": 230400
        },
        "a2": {
          "name": "a2",
          "offset": 230400,
          "size": 331776
        },
        "a3": {
          "name": "a3",
          "offset": 562176,
          "size": 331776
        },
        "a4": {
          "name": "a4",
          "offset": 893952,
          "size": 331776
        },
        "a5": {
          "name": "a5",
          "offset": 1225728,
          "size": 331776
        },
        "a6": {
          "name": "a6",
          "offset": 1557504,
          "size": 331776
        },
        "a7": {
          "name": "a7",
          "offset": 1889280,
          "size": 331776
        },
        "a8": {
          "name": "a8",
          "offset": 2221056,
          "size": 331776
        },
        "a9": {
          "name": "a9",
          "offset": 2552832,
          "size": 331776
        },
        "a10": {
          "name": "a10",
          "offset": 2884608,
          "size": 331776
        },
        "a11": {
          "name": "a11",
          "offset": 3216384,
          "size": 331776
        },
        "a12": {
          "name": "a12",
          "offset": 3548160,
          "size": 331776
        },
        "a13": {
          "name": "a13",
          "offset": 3879936,
          "size": 192
        },
        "a14": {
          "name": "a14",
          "offset": 3880128,
          "size": 361
        }
      }
    },
    "dynamic": {
      "size": 0,
      "allocations": {}
    }
  },
  "placeholders": {
    "__MAX_THREADS_PER_THREADGROUP__": null
  },
  "inputs": [
    "a15"
  ],
  "outputs": [
    "a70"
  ],
  "licenses": {
    "webdnn": "(C) Machine Intelligence Laboratory (The University of Tokyo), MIT License"
  }
}